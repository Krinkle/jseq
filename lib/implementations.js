// Generated by CoffeeScript 1.7.1
(function() {
  var ASSERT, BNP, LODASH, TRM, UNDERSCORE, alert, angular, assert_paranoid_equal, badge, cjs_deep_eql, custom_jseq, custom_jseq_options, debug, deep_equal_ident, echo, get_errorproof_comparator, help, info, is_equal, jdq_deepequal, jkroso_equals, jseq, jv_equals, log, othiym23_deepEqual, praise, rpr, should, substack_deep_equal, urge, warn, whisper;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'jsEq/implementations';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  praise = TRM.get_logger('praise', badge);

  echo = TRM.echo.bind(TRM);


  /* implementations of deep equality tests: */

  BNP = require('coffeenode-bitsnpieces');

  ASSERT = require('assert');

  LODASH = require('lodash');

  UNDERSCORE = require('underscore');

  jkroso_equals = require('equals');

  othiym23_deepEqual = require('deeper');

  should = require('should');

  substack_deep_equal = require('deep-equal');

  jv_equals = require('../3rd-party/JV-jeanvincent.js');

  cjs_deep_eql = require('deep-eql');

  jseq = require('./eq');

  jdq_deepequal = require('deepequal');

  assert_paranoid_equal = require('assert-paranoid-equal');

  is_equal = require('is-equal');

  angular = require('angular');

  deep_equal_ident = require('deep-equal-ident');

  custom_jseq_options = {
    'signed-zeroes': true,
    'functions': false,
    'NaN': false,
    'properties': false,
    'primitive-and-object': false
  };

  custom_jseq = jseq["new"](custom_jseq_options);

  get_errorproof_comparator = function(test_method) {
    return function(a, b) {
      var R, error;
      try {
        R = test_method(a, b);
      } catch (_error) {
        error = _error;
        if (error['message'] === 'Maximum call stack size exceeded') {
          error['code'] = 'jsEq';
          throw error;
        }
        return false;
      }
      return R;
    };
  };

  module.exports = {
    "==: native ==": {
      eq: function(a, b) {
        return a == b;
      },
      ne: function(a, b) {
        return a != b;
      }
    },
    "===: native ===": {
      eq: function(a, b) {
        return a === b;
      },
      ne: function(a, b) {
        return a !== b;
      }
    },
    "OIS: native Object.is": {
      eq: function(a, b) {
        return Object.is(a, b);
      },
      ne: function(a, b) {
        return Object.is(a, b);
      }
    },
    "NDE: NodeJS assert.deepEqual": {
      eq: function(a, b) {
        var error;
        try {
          ASSERT.deepEqual(a, b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      },
      ne: function(a, b) {
        var error;
        try {
          ASSERT.notDeepEqual(a, b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      }
    },
    "CHA: https://github.com/chaijs/deep-eql": {
      eq: function(a, b) {
        return cjs_deep_eql(a, b);
      },
      ne: function(a, b) {
        return !cjs_deep_eql(a, b);
      }
    },
    "o23: https://github.com/othiym23/node-deeper": {
      eq: function(a, b) {
        return othiym23_deepEqual(a, b);
      },
      ne: function(a, b) {
        return !othiym23_deepEqual(a, b);
      }
    },
    "*JV: http://stackoverflow.com/a/6713782/256361": {
      eq: get_errorproof_comparator(jv_equals),
      ne: get_errorproof_comparator(function(a, b) {
        return !jv_equals(a, b);
      })
    },
    "DEQ: https://github.com/substack/node-deep-equal": {
      eq: get_errorproof_comparator(substack_deep_equal),
      ne: get_errorproof_comparator(function(a, b) {
        return !substack_deep_equal(a, b);
      })
    },
    "SH1: https://github.com/shouldjs/should.js#equal": {
      eq: function(a, b) {
        var error;
        try {
          (should(a)).equal(b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      },
      ne: function(a, b) {
        var error;
        try {
          !(should(a)).equal(b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      }
    },
    "SH2: https://github.com/shouldjs/should.js#eql": {
      eq: function(a, b) {
        var error;
        try {
          (should(a)).eql(b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      },
      ne: function(a, b) {
        var error;
        try {
          !(should(a)).eql(b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      }
    },
    "JDQ: https://github.com/JayceTDE/deepequal": {
      eq: get_errorproof_comparator(jdq_deepequal),
      ne: get_errorproof_comparator(function(a, b) {
        return !jdq_deepequal(a, b);
      })
    },
    "APE: https://github.com/dervus/assert-paranoid-equal": {
      eq: function(a, b) {
        var error;
        try {
          assert_paranoid_equal.paranoidEqual(a, b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      },
      ne: function(a, b) {
        var error;
        try {
          assert_paranoid_equal.notParanoidEqual(a, b);
        } catch (_error) {
          error = _error;
          return false;
        }
        return true;
      }
    },
    "CND: CoffeeNode Bits'N'Pieces": {
      eq: function(a, b) {
        return BNP.equals(a, b);
      },
      ne: function(a, b) {
        return !BNP.equals(a, b);
      }
    },
    "UDS: underscore _.isEqual": {
      eq: function(a, b) {
        return UNDERSCORE.isEqual(a, b);
      },
      ne: function(a, b) {
        return !UNDERSCORE.isEqual(a, b);
      }
    },
    "LDS: lodash _.isEqual": {
      eq: function(a, b) {
        return LODASH.isEqual(a, b);
      },
      ne: function(a, b) {
        return !LODASH.isEqual(a, b);
      }
    },
    "DQI: https://github.com/fkling/deep-equal-ident": {
      eq: get_errorproof_comparator(deep_equal_ident),
      ne: get_errorproof_comparator(function(a, b) {
        return !deep_equal_ident(a, b);
      })
    },
    "ISE: https://github.com/ljharb/is-equal": {
      eq: get_errorproof_comparator(is_equal),
      ne: get_errorproof_comparator(function(a, b) {
        return !is_equal(a, b);
      })
    },
    "ANG: https://github.com/bclinkinbeard/angular": {
      eq: get_errorproof_comparator(angular.equals),
      ne: get_errorproof_comparator(function(a, b) {
        return !angular.equals(a, b);
      })
    },
    "EQ: jsEq.eq": {
      eq: get_errorproof_comparator(jseq),
      ne: get_errorproof_comparator(function(a, b) {
        return !jseq(a, b);
      })
    },
    "*EQ: custom version of jsEq.eq": {
      eq: get_errorproof_comparator(custom_jseq),
      ne: get_errorproof_comparator(function(a, b) {
        return !custom_jseq(a, b);
      })
    },
    "JKR: jkroso equals": {
      eq: function(a, b) {
        return jkroso_equals(a, b);
      },
      ne: function(a, b) {
        return !jkroso_equals(a, b);
      }
    }
  };

}).call(this);
